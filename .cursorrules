This document establishes strict guidelines to prevent any coding errors while ensuring optimal implementation across our technology stack: Express, React, React Query, Tailwind CSS, PostgreSQL, TypeScript, Next.js, Drizzle ORM, and CVA.

Foundational Principles
All code must be written with TypeScript in strict mode, with no exceptions. Every variable, parameter, and return type must be explicitly typed. Never use 'any' - opt for 'unknown' with proper type guards when dealing with uncertain types. Discriminated unions should be used instead of ambiguous union types. All functions must implement early returns and proper error handling at their entry points.

Project Architecture
The project follows a feature-based folder structure within the src directory, organizing code into components, hooks, pages, utils, api, services, contracts, and styles. All directory names must use lowercase with dashes (e.g., auth-wizard). Components must be exported using named exports exclusively. The separation of concerns principle is strictly enforced: presentational components, business logic, and side effects must remain isolated.

Next.js and React Implementation
Server Components are the default choice - 'use client' directives should only be used when absolutely necessary for browser API access. Dynamic routes must use bracket notation and include parameter validation. All images must be optimized using next/image with proper configuration of layout, priority, sizes, and srcSet attributes. Error boundaries must be implemented using error.tsx and global-error.tsx files. Metadata must be properly configured using metadata objects or generateMetadata.

State Management and Data Fetching
React Query serves as the primary tool for server state management. QueryClient and QueryClientProvider must be configured at the application root. Query keys must follow array syntax for proper caching. Implement stale-while-revalidate strategy by default. Prefetching is mandatory for anticipated data needs. Optimistic updates must be implemented for all mutations. Client-side state should be minimized, preferring URL state management with 'nuqs' when appropriate.

Component Development
All components must be functional and declarative. Props must be validated using TypeScript interfaces. Internationalization support must be built-in from the start. Components must be SEO-optimized when relevant and include proper accessibility attributes. Loading states and error handling are mandatory. Every component must be thoroughly documented with JSDoc comments explaining its purpose, props, and usage examples.

Styling and Design System
Tailwind CSS utilities must follow a consistent order. Responsive design must follow a mobile-first approach. Dark mode support is mandatory. CVA must be used for component variants. Custom CSS is prohibited unless absolutely necessary and must be approved by the team lead. Design tokens must be defined in tailwind.config.js and reused consistently throughout the application.

Error Prevention and Handling
Every possible error scenario must be anticipated and handled appropriately. Expected errors should be modeled as return values, while unexpected errors must be caught by error boundaries. Error messages must be user-friendly and logged appropriately. All functions must implement guard clauses and early returns for invalid states. Database operations must include proper error handling and rollback strategies.

Performance Optimization
Code splitting and lazy loading are mandatory for all non-critical components. Images must be served in WebP format with proper sizing. Core Web Vitals must be monitored and maintained within optimal ranges. API responses must be cached appropriately. Database queries must be optimized and indexed properly. Bundle size must be monitored and kept minimal through proper code splitting and dynamic imports.

Testing Requirements
Every component and utility must have comprehensive unit tests using React Testing Library. Integration tests are required for all feature flows. End-to-end tests must cover critical user paths. Accessibility testing is mandatory. Test coverage must be meaningful rather than just hitting arbitrary percentage targets. All tests must be properly organized and documented.

Security Measures
Authentication and authorization must be implemented for all protected routes. Input validation is required on both client and server sides. CSRF protection must be implemented for all forms. Password hashing is mandatory using industry-standard algorithms. Security headers must be properly configured. Session management must follow security best practices.

Development Process
Code reviews are mandatory for all changes. Pull requests must include clear descriptions and screenshots where applicable. Commits must follow Conventional Commits specification. Changes must be incremental and focused. Automated testing must pass before any code can be merged. Performance impact must be assessed for all changes.

Final Directive
This ruleset is designed to prevent any coding mistakes through strict adherence to best practices and comprehensive error prevention strategies. The AI agent must validate all generated code against these rules before providing any response. If there's any uncertainty about the correctness of the code, the AI must either request clarification or provide alternative approaches that meet these strict requirements.

Remember: It's better to take time to generate correct code than to generate quick, error-prone solutions. Every line of code must be purposeful, typed, tested, and aligned with these guidelines.